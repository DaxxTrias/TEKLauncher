using System.Collections.Concurrent;
using System.Windows.Controls;
using TEKLauncher.Controls;
using TEKLauncher.Tabs;
using TEKLauncher.Windows;

namespace TEKLauncher.Servers;

/// <summary>Represents a cluster of servers.</summary>
class Cluster
{
    /// <summary>Cluster's Discord server invite link.</summary>
    public readonly string? Discord;
    /// <summary>Nickname of cluster owner.</summary>
    public readonly string? Hoster;
    /// <summary>URL of the cluster icon.</summary>
    public readonly string? IconUrl;
    /// <summary>ID of the cluster.</summary>
    public readonly string Id;
    /// <summary>Name of the cluster.</summary>
    public readonly string Name;
    /// <summary>Description of the cluster.</summary>
    public readonly Description? Description;
    /// <summary>Servers that compose the cluster.</summary>
    public readonly List<Server> Servers;
    /// <summary><see cref="CurrentStatus"/> backing field.</summary>
    static int _currentStatus;
    /// <summary>Predefined cluster for storing favorite servers.</summary>
    public static readonly Cluster Favorites = new("\x0\x1", LocManager.GetString(LocCode.Favorites), null, null, null, null, new());
    /// <summary>Predefined cluster for storing local network servers.</summary>
    public static readonly Cluster Lan = new("\x0\x2", LocManager.GetString(LocCode.LAN), null, null, null, null, new());
    /// <summary>Predefined cluster for storing online servers that are not member of any cluster.</summary>
    public static readonly Cluster Unclustered = new("\x0\x3", LocManager.GetString(LocCode.UnclusteredServers), null, null, null, null, new());
    /// <summary>List of online clusters available on Steam network.</summary>
    public static readonly List<Cluster> OnlineClusters = new();
    /// <summary>Gets a value that indicates whether this cluster is a special one generated by the launcher.</summary>
    public bool IsSpecialCluster => Id[0] == '\x0';
    /// <summary>Code of current status of cluster lists: 0 - Loading; 1 - Steam is not running; 2 - One of Steam API requests failed; 3 - Success.</summary>
    public static int CurrentStatus
    {
        get => _currentStatus;
        private set
        {
            _currentStatus = value;
            Application.Current.Dispatcher.Invoke(delegate
            {
                var mainWindow = (MainWindow)Application.Current.MainWindow;
                if (mainWindow.TabFrame.Child is ServersTab serversTab)
                    serversTab.UpdateStatus();
            });
        }
    }
    /// <summary>Initializes a new cluster object with specified information and list of servers.</summary>
    /// <param name="id">ID of the cluster based on which servers will be added to it.</param>
    /// <param name="name">Display name of the cluster.</param>
    /// <param name="hoster">Nickname of cluster owner.</param>
    /// <param name="iconUrl">URL of the cluster icon.</param>
    /// <param name="discord">Cluster's Discord server invite link.</param>
    /// <param name="description">Description of the cluster.</param>
    /// <param name="initialServers">The first servers to compose the cluster.</param>
    public Cluster(string id, string name, string? hoster, string? iconUrl, string? discord, Description? description, List<Server> initialServers)
    {
        Id = id;
        Discord = discord;
        Hoster = hoster;
        IconUrl = iconUrl;
        Name = name;
        Description = description;
        Servers = initialServers;
    }
    /// <summary>Reloads all cluster lists via Steam API.</summary>
    public static void ReloadLists()
    {
        CurrentStatus = 0;
        //Clean up all current lists
        Favorites.Servers.Clear();
        Lan.Servers.Clear();
        Unclustered.Servers.Clear();
        OnlineClusters.Clear();
        var dispatcher = Application.Current.Dispatcher;
        Border tabFrame = null!;
        dispatcher.Invoke(delegate
        {
            tabFrame = ((MainWindow)Application.Current.MainWindow).TabFrame;
            if (tabFrame.Child is ServersTab serversTab)
                serversTab.Clear();
        });
        if (!Steam.App.IsRunning)
        {
            CurrentStatus = 1;
            return;
        }
        //Retrieve new server lists from Steam API
        var lanServers = Steam.ServerBrowser.GetServers(Steam.ServerBrowser.ServerListType.LAN);
        if (lanServers is null)
        {
            CurrentStatus = 2;
            return;
        }
        var favoritesServers = Steam.ServerBrowser.GetServers(Steam.ServerBrowser.ServerListType.Favorites);
        if (favoritesServers is null)
        {
            CurrentStatus = 2;
            return;
        }
        var onlineServers = Steam.ServerBrowser.GetServers(Steam.ServerBrowser.ServerListType.Online);
        if (onlineServers is null)
        {
            CurrentStatus = 2;
            return;
        }
        //Query servers and sort them into clusters
        var parallelOptions = new ParallelOptions { MaxDegreeOfParallelism = 10 };
        Parallel.ForEach(lanServers, server =>
        {
            if (!server.Query())
                return;
            lock (Lan.Servers)
                Lan.Servers.Add(server);
            dispatcher.Invoke(delegate
            {
                if (tabFrame.Child is ServersTab serversTab)
                    serversTab.GetItemForCluster(Lan).RefreshNumServers();
                else if (tabFrame.Child is ClusterTab clusterTab && clusterTab.DataContext == Lan)
                    clusterTab.AddServer(server);
            });
        });
        Parallel.ForEach(favoritesServers, parallelOptions, server =>
        {
            var currentServer = server;
            Server? lanServer;
            lock (Lan.Servers)
                lanServer = Lan.Servers.Find(s => s.Equals(currentServer));
            if (lanServer is not null)
                currentServer = lanServer;
            else if (!currentServer.Query())
                return;
            lock (Favorites.Servers)
                Favorites.Servers.Add(currentServer);
            dispatcher.Invoke(delegate
            {
                if (tabFrame.Child is ServersTab serversTab)
                    serversTab.GetItemForCluster(Favorites).RefreshNumServers();
                else if (tabFrame.Child is ClusterTab clusterTab && clusterTab.DataContext == Favorites)
                    clusterTab.AddServer(currentServer);
            });
        });
        var clusterCandidateCache = new ConcurrentDictionary<string, Server>(); //Stores servers that have a cluster ID but yet there are no other servers clustered with it
        int unknownClusterIndex = 0;
        Parallel.ForEach(onlineServers, parallelOptions, server =>
        {
            var currentServer = server;
            Server? favoriteServer;
            lock (Favorites.Servers)
                favoriteServer = Favorites.Servers.Find(s => s.Equals(currentServer));
            if (favoriteServer is not null)
                currentServer = favoriteServer;
            else if (!currentServer.Query())
                return;
            if (currentServer.ClusterId is null)
            {
                lock (Unclustered.Servers)
                    Unclustered.Servers.Add(currentServer);
                dispatcher.Invoke(delegate
                {
                    if (tabFrame.Child is ServersTab serversTab)
                        serversTab.GetItemForCluster(Unclustered).RefreshNumServers();
                    else if (tabFrame.Child is ClusterTab clusterTab && clusterTab.DataContext == Unclustered)
                        clusterTab.AddServer(currentServer);
                });
                return;
            }
            Cluster? cluster;
            lock (OnlineClusters)
                cluster = OnlineClusters.Find(c => c.Id == currentServer.ClusterId);
            if (cluster is null)
            {
                if (clusterCandidateCache.Remove(currentServer.ClusterId, out var candidate))
                {
                    cluster = new(currentServer.ClusterId, currentServer.Info?.ClusterName ?? string.Format(LocManager.GetString(LocCode.UnknownCluster), ++unknownClusterIndex), currentServer.Info?.HosterName, currentServer.Info?.IconUrl, currentServer.Info?.Discord, currentServer.Info?.ClusterDescription, new() { candidate, currentServer });
                    lock (Unclustered.Servers)
                        Unclustered.Servers.Remove(candidate);
                    lock (OnlineClusters)
                        OnlineClusters.Add(cluster);
                    dispatcher.Invoke(delegate
                    {
                        if (tabFrame.Child is ServersTab serversTab)
                        {
                            serversTab.GetItemForCluster(Unclustered).RefreshNumServers();
                            serversTab.AddItem(new ClusterItem(cluster));
                        }
                        else if (tabFrame.Child is ClusterTab clusterTab && clusterTab.DataContext == Unclustered)
                            clusterTab.RemoveServer(candidate);
                    });
                }
                else
                {
                    clusterCandidateCache[currentServer.ClusterId] = currentServer;
                    lock (Unclustered.Servers)
                        Unclustered.Servers.Add(currentServer);
                    dispatcher.Invoke(delegate
                    {
                        if (tabFrame.Child is ServersTab serversTab)
                            serversTab.GetItemForCluster(Unclustered).RefreshNumServers();
                        else if (tabFrame.Child is ClusterTab clusterTab && clusterTab.DataContext == Unclustered)
                            clusterTab.AddServer(currentServer);
                    });
                }
            }
            else
            {
                lock (cluster.Servers)
                    cluster.Servers.Add(currentServer);
                dispatcher.Invoke(delegate
                {
                    if (tabFrame.Child is ServersTab serversTab)
                        serversTab.GetItemForCluster(cluster).RefreshNumServers();
                    else if (tabFrame.Child is ClusterTab clusterTab && clusterTab.DataContext == cluster)
                        clusterTab.AddServer(currentServer);
                });
            }
        });
        clusterCandidateCache.Clear();
        CurrentStatus = 3;
    }
}